---
- name: "Create {{ network_name }} network."
  openstack.cloud.network:
    state: present
    name: "{{ network_name }}"
    external: false
    mtu_size: "{{ network_mtu_size | default(omit) }}"
    wait: true
    timeout: "{{ openstack_api_timeout }}"

- name: "Assign subnet to {{ network_name }} network."
  openstack.cloud.subnet:
    # 'name' must be the same as 'network_name' or else creating routers for this subnet will fail due to known bug.
    name: "{{ network_name }}"
    network_name: "{{ network_name }}"
    state: present
    cidr: "{{ network_cidr }}"
    # Bug: https://storyboard.openstack.org/#!/story/2008172
    # openstack.cloud.subnet is not idempotent and will fail when a router is present
    # and which is linked to the gateway_ip of the subnet.
    # In that case you must delete the router in order to be able to run this playbook,
    # which may require disassociating floating IPs first: yikes!
    gateway_ip: "{{ network_gateway }}"
    enable_dhcp: true
    dns_nameservers: "{{ nameservers }}"
    wait: true
    timeout: "{{ openstack_api_timeout }}"

- name: "Create router to bridge {{ router_network }} and {{ network_name }} networks."
  openstack.cloud.router:
    state: present
    name: "Router bridging {{ router_network }} and {{ network_name }}"
    network: "{{ router_network }}"
    interfaces:
      - "{{ network_name }}"
      #
      # Specifying only the network_name will fail when the default gateway IP
      # from that subnet is already in use. In that case we must specify an IP,
      # but there is no easy, safe way to determine which one we should use....
      #
      # - net: "{{ network_name }}"
      #   subnet: "{{ network_name }}"
      #   portip: 10.10.1.1
    wait: true
    timeout: "{{ openstack_api_timeout }}"
  #
  # Hack to skip this task to prevent failure when the router already exists.
  # WARNING:
  #  * This hack is based on the router name and will fail if the router name was changed.
  #  * Due to this hack the router will not get updated if it already exists and would need an uppdate.
  #
  when: api_router_info['routers']
        | rejectattr('name', 'undefined')
        | selectattr('name', 'equalto', 'Router bridging ' + router_network + ' and ' + network_name)
        | length < 1
...
