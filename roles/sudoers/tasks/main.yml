---
#
# Allow passwordless sudo to functional accounts (e.g. for datamanager accounts) for indivual users or %groups.
# Who can become what can be specified in the sudoers variable of group_vars/${stackname}/vars.yml.
#
- name: "Find all {{ ansible_managed_sudoers_filename_tag }} tagged files in /etc/sudoers.d/."
  ansible.builtin.find:
    paths: '/etc/sudoers.d/'
    use_regex: true
    patterns: ".*{{ ansible_managed_sudoers_filename_tag }}.*"
  register: found_ansible_managed_sudoers
  become: true

- name: "Remove outdated {{ ansible_managed_sudoers_filename_tag }} tagged files from /etc/sudoers.d/."
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ found_ansible_managed_sudoers['files'] | map(attribute='path') | list }}"
  when: item | regex_replace('.*' + ansible_managed_sudoers_filename_tag + '-', '') not in configured_ansible_managed_sudoers | default([])
  become: true

- name: "Create {{ ansible_managed_sudoers_filename_tag }} tagged files in /etc/sudoers.d/ for configured sudoers."
  ansible.builtin.template:
    src: "templates/92-{{ ansible_managed_sudoers_filename_tag }}"
    dest: "/etc/sudoers.d/92-{{ ansible_managed_sudoers_filename_tag }}-{{ item['name'] | default(item['become']) }}"
    owner: 'root'
    group: 'root'
    mode: '0440'
    validate: '/usr/sbin/visudo -cf %s'
  loop: "{{ sudoers | default([]) }}"
  become: true
...
