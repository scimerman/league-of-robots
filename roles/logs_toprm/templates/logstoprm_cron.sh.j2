#!/bin/bash
#
# Overview
# - this script is intended to run as cron on multiple machines at the same time
# - the only way the machines can communicate is via is via shared filesystem
#   where a specific directory is located - used by machines to coordinate
# - the extra information about the machine that is running cron is stored in
#   additional files inside this `lock directory`
# - script should be able to work on samba/cifs (isilon), nfs and lustre (tested)
# - the time is gathered from the cifs server's time, so it does not matter
#   how different the datetime settings are on the client side
# Other
# - for testing you can provide a string as a paramater, and that one will be
#   regarded in place of hostname (so that you can test and develop on local
#   machine)
#

# First configure bash to correctly handle missing variables and errors
set -eEuo pipefail
_log_tag="logstoprm"
# We store all the extra information into the system logs, like civilized people
trap 'logger -t "${_log_tag}" "${$} Command (${BASH_COMMAND}) failed on line number (${LINENO})"' ERR

{% if logs_server_public_networks is defined and ( logs_server_public_networks|length > 0 ) %}
{% raw %}
#
## Variables
#
_script_path_dir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
_rsync_log="${_script_path_dir}/${0##*/}.cron.log"

if test -e "${_rsync_log}"; then
   if test -e "${_rsync_log}.old"; then
      # Keep only 100k of old rsync logs
      cat "${_rsync_log}.old" "${_rsync_log}" 2>/dev/null | tail -n 100000 > "${_rsync_log}.tmp"
      mv "${_rsync_log}.tmp" "${_rsync_log}.old"
   else
      cp ${_rsync_log} ${_rsync_log}.old
   fi
fi
echo "" > "${_rsync_log}"

_main_lock_dir="{% endraw %}{{ logs_toprm_destination }}{% raw%}/lock_dirs"      # full path
if ! test -d "${_main_lock_dir}"; then
    mkdir -p "${_main_lock_dir}"
    logger -t "${_log_tag}" "Created ${_main_lock_dir}"
fi
_hostname="${1:-$(/bin/hostname)}" # for developing and testing - first argument overwrites hostname
_lock_dir="${_main_lock_dir}/${_hostname}"
_pidfile="${_lock_dir}/pid"
_small_delay="6"        # [seconds] how long should cron wait (after lock directory is created) to start the process
_max_runtime=28800      # [seconds] how long can cron job run before being killed?
             # ^4h      # Should be less than time between to cron exections. If daily cron (86400s)
                        # then 80000 is appropriate. Note that the jobs can run longes, as _max_loop is
                        # the one that checks if job is too long, and kills the job if lasts too long
_max_loops="3"          # how many times should cronjob run and ignore (go to sleep without action), before
                        # starts cleaning stale processes?
_max_remote_time=21600  # [seconds] how long should current cron ignore the cron job from another host?
                # ^6h   # on top of job running already. Script removes lock folder and files after
                        #         now + ( _max_runtime * _max_loops ) + _max_remote_time
# placeholder variables to be later populated
_earl_name=''

function clean_stale_pidfiles(){
   local _stale_pidfile="${_main_lock_dir}/${_hostname}/pid"
   if test -e "${_stale_pidfile}"; then
      local _pid
      # first clear all the pids that are not running
      for _pid in $(cat "${_stale_pidfile}"); do
         if ! pgrep -u ${UID} "timeout" | grep -q "${_pid}"; then
            sed -i "/${_pid}/d" "${_stale_pidfile}"
            logger -t "${_log_tag}" "($$ ${FUNCNAME}) Removed ${_pid} from pid file"
         fi
      done
      # if file is now empty, remove it whole file
      if test -z "$(cat "${_stale_pidfile}")"; then
         rm -f "${_stale_pidfile}" && logger -t "${_log_tag}" "(${$} ${FUNCNAME}) Removed stale pid file [${_main_lock_dir}/${_hostname}/pid]"
      fi
   fi
}

function check_time(){
   # first parameter is hostname (or is set to this hostname if not provided)
   # 1. check's if time file exist, and
   # 2. check time
   #                                            return   further action
   #     now > _time_delay_start                   0        can start
   #     if _start_time is unassigned              1        need to wait
   #     now < _time_delay_start                   1        need to wait
   #     now > _time_delay_start + _max_runtime    13       should kill process
   #     now >                                     14       should kill process
   #      _time_delay_start + ( _max_runtime * _max_loops ) + _max_remote_time
   #     file `time` is missing or wrong perms              log

   # Collect time from server
   _timedir=".testtimedir.${_hostname}"
   test -d "${_timedir}" && rmdir "${_timedir}" # clean old directory
   mkdir "${_main_lock_dir}/${_timedir}"
   _time_now="$(stat -c %Z ${_timedir})"        # get server's time
   rmdir "${_main_lock_dir}/${_timedir}"
   logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name})    collected _time_now epoch seconds from server [${_time_now}]"

   local _time_created
   _time_created=$(stat -c %Z ${_main_lock_dir}/${1:-${_hostname}})     # does NOT include _small_delay, tail, as last one is the most important
   _time_delay_start="$((_time_created + _small_delay))"    # add delay to the time of when the lock folder has been created
   if test -z "${_time_delay_start}"; then # the time is missing
      logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name}) Error _time_delay_start is empty"
      exit 200
   fi
   local _time_max_runtime=$((_time_delay_start + _max_runtime))
   local _time_max_remotetime=$(( _time_delay_start + ( _max_runtime * _max_loops ) + _max_remote_time))
   if [[ "${_time_now}" -gt "${_time_max_remotetime}" ]]; then
      logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name})    remote host runs for too long! (returning 14)"
      return 14   # clean remote host lock directory and files
   elif [[ "${_time_now}" -gt "${_time_max_runtime}" ]]; then
      logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name})    should kill! (returning 13)"
      return 13   # kill
   elif [[ "${_time_now}" -lt "${_time_delay_start}" ]]; then
      logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name})    should wait (returning (1)"
      return 1    # wait
   elif [[ "${_time_now}" -ge "${_time_delay_start}" ]]; then
      logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name})    can run (returning ok 0)"
      return 0    # run
   else
      logger -t "${_log_tag}" "(${$} ${FUNCNAME} ${_earl_name})    unexpected result (exit 201)"
      exit 201
   fi
}

function remove_locks(){
   # Cleaning up after run
   if test -d "${_lock_dir}"; then
      if test -z "$(cat "${_hostname}/pid")"; then   # check if pidfile contains our process or is empty
         rm -f "${_hostname}/pid" simply remove it
         rmdir "${_hostname}" && logger -t "${_log_tag}" "(${$} ${FUNCNAME})   lock directory removed [$(pwd)/${_hostname}]"
      fi
   fi
}

function killing_pid(){
   if test -e "${_hostname}/pid"; then
      _pids="$(sort -u < "${_hostname}/pid")"
   else
      logger -t "${_log_tag}" "(${$} ${FUNCNAME}) Error, no pid provided to kill and pid file is missing. Exit 255!"
      exit 255
   fi
   for _each_pid in ${_pids}; do
      if pgrep -u "${UID}" "timeout" 2>&1 | grep -q "${_each_pid}"; then # killing timeout processes
         logger -t "${_log_tag}" "(${$} ${FUNCNAME}) Killing process ${_each_pid}"
         kill -9 ${_each_pid} && \
           logger -t "${_log_tag}" "(${$} ${FUNCNAME})  ${_each_pid} killed!"
      fi
   done
}

function start_flow(){
   logger -t "${_log_tag}" "($$ ${FUNCNAME}) Entering main loop [for ${_earl_name}]"
   sync
   if ! test -w ${_main_lock_dir}/; then
      logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    top level locking directory is missing [${_main_lock_dir}]"
   fi
   _all_host_count="$(ls -1 ${_main_lock_dir} | wc -l)"
   _my_hostname_count="$(find "${_main_lock_dir}" -name "${_hostname}" | wc -l)"
   if [[ "${_all_host_count}" -eq "0" ]]; then
      logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    no other host if running anything right now"
      logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    making lock directory ${_lock_dir}"
      mkdir "${_lock_dir}" || { logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})      cannot create lock dir ${_lock_dir}" ; exit 255; }
      sync
      sleep ${_small_delay} # don't rush things
      start_flow
   else # hosts are running things
      logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    lock dirs exist"
      if [[ "${_my_hostname_count}" -gt "0" ]]; then
         logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    this machine can run this script"
         if [[ "${_my_hostname_count}" -eq "${_all_host_count}" ]]; then # it's only my hostname
            logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    ONLY this machine can run this this script"
            # Is pid file inside and it contains pid?
            _time_result=$(check_time)
            if [[ "${_time_result}" -eq "0" ]]; then
               touch "${_lock_dir}/pid"
               if test -e "${_pidfile}"; then
                  if test -z "$(cat ${_pidfile})" ; then # pidfile exists and is empty
                     logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    we already delayed the start so we can now proceed"
                     # Executing the main command
                     test -d "{% endraw %}{{ logs_toprm_destination }}{% raw%}/${_earl_name}/" || mkdir "{% endraw %}{{ logs_toprm_destination }}{% raw%}/${_earl_name}/"
                     # Make rsync log a bit nicer to read
                     echo -e "#######\n####### ${_earl_name}\n#######\n" >> "${_rsync_log}"
                     # the main command we would like to run inside cron
                     _command="{ HOSTALIASES=/etc/hosts-LoR rsync -au --rsh=\"ssh -l {% endraw %}{{ logs_toprm_earl_user }}{% raw%}\" --log-file="${_rsync_log}" ${_earl_name}::logstoprm {% endraw %}{{ logs_toprm_destination }}{% raw%}/${_earl_name}/ ; }"
                     _command_logger="logger -t \"${_log_tag}\" \"($$ ${FUNCNAME} ${_earl_name})    main command SUCCESSFULLY finished!\""
                     logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})    RUNNING MAIN COMMAND"
                     timeout "${_max_runtime}" bash -c "${_command} && ${_command_logger}" & _child="${!}"
                     echo "${_child}" >> "${_pidfile}" # storing process ID inside the pid file
                     # Next line ensures that process is killed if lock pid file disappears
                     {  (  while test -e ${_pidfile} && grep -q "${_child}" "${_pidfile}"; do sleep ${_small_delay}; done; \
                           if pgrep -u ${UID} timeout 2>&1 | grep -q ${_child}; then
                              logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name}) Killing PID ${_child} because the lock pid file disappeared!"; \
                              kill -9 "${_child}"; \
                              test -d "${_lock_dir}" && echo -n "" > "${_pidfile}"; \
                           fi \
                        ) & \
                     } 1>/dev/null 2>&1
                     wait ${_child} 2>/dev/null || true                          # true ensures that the cleanup is done
                     echo -n "" > "${_pidfile}" && sync # empty pidfile if it is still exist by the end of process
                  else # the pid file is not empty
                     _running_pid="$(head -n1 < "${_pidfile}")"
                     _pidfile_nr_lines="$(wc -l < "${_pidfile}")"
                     if [[ "${_pidfile_nr_lines}" -ge "${_max_loops}" ]]; then # we found this process running too many times, time to kill it
                        killing_pid
                        exit 255
                     else # it exist and has a pid
                        logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})  x script already running > logging & exiting"
                        echo "${_running_pid}" >> "${_pidfile}" # duplicating process ID inside pid file
                        exit 255
                     fi
                  fi
               fi
            else
               case "${_time_result}" in
                  1)
                     logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})      too early, let's wait ... "
                     sleep ${_small_delay} && start_flow         # go to start
                     ;;
                  13|14)
                     logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})      we should kill: this process is running for too long"
                     killing_pid
                     exit 255
                     ;;
                  255)
                     logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name}) Cannot get time of lock directory!"
                     exit 200
                     ;;
                  *)
                     logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name}) Unknown error, should log"
                     ;;
               esac
            fi
         fi
      else
         logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})   there are other hosts running this script"
         for _each_host in */; do                                             # loop through the hosts directories
            check_time "${_each_host}" || \
               if [[ "$?" -eq "14" ]]; then
                  logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name}) '${_each_host}' runs script for too long. Removing the lock directory and files inside. Host will clean this processes on own side at next cron!"
                  rm -f "${_each_host}/"*               # remove all files, the selection of just 'time' and 'pid' could make issues
                                                        # if some other files would appear - like .nfsXXX .tmp or similar
                  rmdir "${_each_host}/"
               fi
         done
         logger -t "${_log_tag}" "($$ ${FUNCNAME} ${_earl_name})   removing our host from the race and exit ... "
         test -d ${_hostname} && rmdir ${_hostname}
         exit 250
      fi
   fi
}

{% endraw %}
declare earl_servers=(
{% for logs_class in logs_server_public_networks -%}
   {%- for logs_server in logs_server_public_networks[logs_class] %}
      {{ logs_server.name }}
   {% endfor -%}
{%- endfor %}
)
{% raw %}
logger -t "${_log_tag}" "($$ main) _______ Starting _______"
cd "${_main_lock_dir}"
clean_stale_pidfiles # first just clean old pids
for _each_server in "${earl_servers[@]}"; do
   _return_code="0"
   _earl_name="${_each_server}"
   start_flow 2>&1 | logger -t "${_log_tag}" || _return_code=${?:-0}
   if [[  "${_return_code}" -ne "0" ]]; then
      logger -t "${_log_tag}" "($$ main ${_earl_name}) exited with an error [ \$?=${_return_code} ] ..."
      case "${_return_code}" in
         250)
            logger -t "${_log_tag}" "($$ main ${_earl_name}) Parallel host execution, exiting the main scipt (exit 255) ..."
            ;;
         255)
            logger -t "${_log_tag}" "($$ main ${_earl_name}) Parallel script execution, exiting the main scipt (exit 255) ..."
            ;;
         *)
      esac
      exit 1
   fi
done

~/deduplicate_logs.sh -d

# Cleanning up
remove_locks

logger -t "${_log_tag}" "($$ main) _______ Finished _______"
{% endraw %}
{% endif %}
