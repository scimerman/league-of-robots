---
- name: Create network ports for servers.
  block:
    - name: "Use pre-defined address from group_vars/{{ stack_name }}/ip_addresses.yml."
      openstack.cloud.port:
        state: present
        name: "{{ inventory_hostname }}-{{ item.name }}"
        network: "{{ item.name }}"
        security_groups: "{{ item.security_group }}"
        binding_vnic_type: "{{ hostvars[inventory_hostname]['host_type'] | default('normal') }}"
        fixed_ips:
          - ip_address: "{{ ip_addresses[inventory_hostname][item.name]['address'] }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when: ip_addresses[inventory_hostname][item.name]['address'] is defined
    - name: "Use new random address from defined subnet."
      openstack.cloud.port:
        state: present
        name: "{{ inventory_hostname }}-{{ item.name }}"
        network: "{{ item.name }}"
        security_groups: "{{ item.security_group }}"
        binding_vnic_type: "{{ hostvars[inventory_hostname]['host_type'] | default('normal') }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when: ip_addresses[inventory_hostname][item.name]['address'] is not defined
- name: Create persistent storage volume.
  openstack.cloud.volume:
    display_name: "{{ inventory_hostname }}-volume"
    size: "{{ local_volume_size_extra }}"
    state: present
    availability_zone: "{{ storage_availability_zone | default('nova') }}"
    wait: true
    timeout: "{{ openstack_api_timeout }}"
  when: local_volume_size_extra is defined and local_volume_size_extra > 0
- name: Create list of network port names for servers.
  ansible.builtin.set_fact:
    instance_nics: "{{ instance_nics | default([]) + [{'port-name': inventory_hostname + '-' + item}] }}"
  with_items: "{{ hostvars[inventory_hostname]['host_networks'] | map(attribute='name') }}"
- name: Create virtual servers.
  openstack.cloud.server:
    state: present
    name: "{{ inventory_hostname }}"
    image: "{{ cloud_image }}"
    flavor: "{{ cloud_flavor }}"
    volume_size: "{{ local_volume_size_root }}"
    boot_from_volume: "{{ openstack_computing_boot_from_volume }}"
    terminate_volume: "{{ openstack_computing_terminate_volume }}"
    #
    # Security groups are assigned to servers based on the ones assigned
    # to the pre-defined network ports used by a server.
    #
    security_groups: "{{ hostvars[inventory_hostname]['host_networks'] | map(attribute='security_group') | unique }}"
    auto_floating_ip: false
    nics: "{{ instance_nics }}"
    userdata: |
      #cloud-config
      password: "{{ cloud_console_pass }}"
      chpasswd: { expire: False }
      #
      # Add each entry to ~/.ssh/authorized_keys for the configured user
      # or the first user defined in the user definition directive.
      #
      ssh_authorized_keys:
      {% for public_key in public_keys_of_local_admins %}{% if 'ssh-rsa' not in public_key %}  - {{ public_key }}
      {% endif %}{% endfor %}
    availability_zone: "{{ availability_zone }}"
    wait: true
    timeout: "{{ openstack_api_timeout }}"
  when: hostvars[inventory_hostname]['host_type'] | default('vm') != 'baremetal'
  register: create_instance_result
- name: Create baremetal servers.
  openstack.cloud.server:
    state: present
    name: "{{ inventory_hostname }}"
    image: "{{ cloud_image }}"
    flavor: "{{ cloud_flavor }}"
    #
    # Security groups are assigned to servers based on the ones assigned
    # to the pre-defined network ports used by a server.
    #
    security_groups: "{{ hostvars[inventory_hostname]['host_networks'] | map(attribute='security_group') | unique }}"
    auto_floating_ip: false
    nics: "{{ instance_nics }}"
    userdata: |
      #cloud-config
      password: "{{ cloud_console_pass }}"
      chpasswd: { expire: False }
      #
      # Add each entry to ~/.ssh/authorized_keys for the configured user
      # or the first user defined in the user definition directive.
      #
      ssh_authorized_keys:
      {% for public_key in public_keys_of_local_admins %}{% if 'ssh-rsa' not in public_key %}  - {{ public_key }}
      {% endif %}{% endfor %}
    availability_zone: "{{ availability_zone }}"
    wait: true
    timeout: "{{ openstack_api_timeout | int + 1200 }}"
  when: hostvars[inventory_hostname]['host_type'] | default('vm') == 'baremetal'
- name: Attach persistent storage volume to servers.
  openstack.cloud.server_volume:
    server: "{{ inventory_hostname }}"
    volume: "{{ inventory_hostname }}-volume"
    wait: true
    timeout: "{{ openstack_api_timeout }}"
  when: local_volume_size_extra is defined and local_volume_size_extra > 0
- name: Assign floating IP to server.
  openstack.cloud.floating_ip:
    server: "{{ inventory_hostname }}"
    state: present
    reuse: true
    network: "{{ stack_networks | selectattr('name', 'equalto', item.name) | map(attribute='router_network') | first }}"
    nat_destination: "{{ item.name }}"
    wait: true
    timeout: "{{ openstack_api_timeout }}"
  #
  # Known bug https://github.com/ansible/ansible/issues/57451
  # openstack.cloud.floating_ip is not idempotent:
  # Succeeds only the first time and throws error on any subsequent calls.
  # Therefore we use a "when" with a silly complex jinja filter including a JMESpath query
  # to check if the VM already has a floating IP linked to an interface in the correct VXLAN.
  #
  # Note: this check currently works for VMs and will fail for baremetal servers.
  #
  when:
    - item.assign_floating_ip is defined
    - item.assign_floating_ip is true
    - item.name not in (create_instance_result.server.addresses | dict2items(key_name='vlan', value_name='specs') | json_query(query))
  vars:
    query: '[?specs[?"OS-EXT-IPS:type"==`floating`]].vlan'
  with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
- name: Make sure servers are started.
  openstack.cloud.server_action:
    action: start
    server: "{{ inventory_hostname }}"
    wait: true
    timeout: "{{ openstack_api_timeout }}"
...
