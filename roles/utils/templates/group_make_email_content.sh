{% raw %}#!/bin/bash

#
# All group owners of each group will receive an email with all the members of
# their group, generated by the colleagues command from cluster-utils.
# If no group owner is listed, the GCC helpdesk wil receive an email with the
# group information of this group.
# See help for all options.
# Mailing is done via the outlook.com by using app password.
#
set -e
set -u
source /apps/modules//modules.bashrc
ml cluster-utils &>/dev/null 2>&1

_parse_owners=true
_parse_dms=true
_groups_from_arguments=""
_script_path_dir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
_current_time=$(date +%Y%m%d_%H%M%S)
_output_mail_dir="${_script_path_dir}/mail_archive/${_current_time}"   # directory to store the created emails
_verbose=false    # extra information while running, for debugging purposes
_send_email=false
_ldap_domain_selected=false
_redirect=false
_redirect_mail=""
_mailing_delay=3

# https://gist.github.com/guessi/82a73ee7eb2b1216eb9db17bb8d65dd1
email_regex="^(([A-Za-z0-9]+((\.|\-|\_|\+)?[A-Za-z0-9]?)*[A-Za-z0-9]+)|[A-Za-z0-9]+)@(([A-Za-z0-9]+)+((\.|\-|\_)?([A-Za-z0-9]+)+)*)+\.([A-Za-z]{2,})+$"

# Print help if -h or --help
# argument flags start with '-', without are only group names
if [[ "${#}" -gt 0 ]]; then
   for _arg in "${@}"; do
      if [[ "${_arg:0:1}" ==  "-" ]]; then
         if [[ "${_arg}" ==  "-h" ]] || [[ "${_arg}" ==  "--help" ]]; then
            echo "You can run command without arguments, and it will parse all the groups and create the e-mails, f.e."
            echo "  ${0}"
            echo " or you could specify a group name"
            echo "  ${0} umcg-gcc"
            echo " or you could specify to create list only for owners"
            echo "  ${0} -o umcg-gcc"
            echo " or mail only for datamanages"
            echo "  ${0} -d umcg-gcc"
            echo " in case of multiple LDAP servers, you can select one with '-Lldapserver'"
            echo "  ${0} -d umcg-gcc --ldap=idvault"
            echo " if you wish extra information, increase verbosity with '-v'"
            echo "  ${0} -d umcg-gcc -v"
            echo " mails are not sent unless the '-E', is provided"
            echo "  ${0} -d umcg-gcc -v -E"
            echo " all mails can be redirected by using '--redirect=email@address' (! note no spaces after '-R' and mail address)"
            echo "  ${0} -d umcg-gcc -v -E --redirect=some.one@mail.it"
            echo " the previous created mails can be picked and sent by using '--continue=/root/utils/mail_archive/...'"
            echo "  ${0} -d umcg-gcc -v -E --redirect=some.one@mail.it --continue=/root/utils/mail_archive/..."
            exit 1
         elif [[ "${_arg}" ==  "-o" ]]; then
            _parse_dms=false
         elif [[ "${_arg}" ==  "-d" ]]; then
            _parse_owners=false
         elif [[ "${_arg}" ==  "-v" ]]; then
            _verbose=true
         elif [[ "${_arg}" ==  "-E" ]]; then
            _send_email=true
         elif [[ "${_arg:0:7}" ==  "--ldap=" ]]; then
            _ldap_domain="${_arg:7}"
            _ldap_domain_selected=true
         elif [[ "${_arg:0:11}" ==  "--redirect=" ]]; then
            _redirect_mail="${_arg:11}"
            if [[ ! "${_redirect_mail}" =~ ${email_regex} ]]; then
               echo "Redirect mail is incorrect, please check it. Exiting ... " && exit 1
            fi
            _redirect=true
         elif [[ "${_arg:0:11}" ==  "--continue=" ]]; then
            _continue_directory="${_arg:11}"
            if ! test -d "${_continue_directory}"; then
               echo "Directory to continue sending mails does not exist, exiting ..." && exit 1
            fi
            _continue=true
            echo "Continuing sending emails from: ${_continue_directory}"
         fi
      else
         _groups_from_arguments=${_groups_from_arguments}" ${_arg}"
      fi
   done
fi

#
# LDAP
#
declare ldap_config_file='/etc/openldap/readonly-ldapsearch-credentials.bash'
declare -a domain_names=("")
source ${ldap_config_file}

# if more domains and none was specified, print the domains
if [[ "${#domain_names[@]}" -gt "1" ]]; then
  if [ "${_ldap_domain_selected}" == false ]; then
     echo "There are more than one LDAP domains, please select one, you can use either"
     for _each_domain in "${domain_names[@]}"; do
        echo "$0 --ldap=\"${_each_domain}\""
     done
     exit 1
  else
     echo "  Domain selected: ${_ldap_domain}"
  fi
fi

#
# Output directory to store e-mails
#
if ( ! test -d ${_output_mail_dir}); then
   mkdir -p ${_output_mail_dir}
   echo "Output directory to store e-mails was created at ${_output_mail_dir}"
fi

if ( test ! -z "$(ls -A "${_output_mail_dir}")" ); then
   echo "Cleaning previously created mails from the folder '${_output_mail_dir}':"
   rm -vI ${_output_mail_dir}/*
   if [[ "$?" -ne "0" ]]; then
      echo "ok, keeping the content and exiting the script ..."
      exit 0
   fi
fi

echo "Groups selected from arguments >${_groups_from_arguments}<"

echo "Assembling selected groups"
declare -a _selected_groups=()
if [[ -z "${_groups_from_arguments// }" ]]; then
   _selected_groups=("$(ls -1 /groups/)")
else
   for _each_group in ${_groups_from_arguments}; do
      # check if selected group(s) exist
      if [[ -n "$(getent group "${_each_group}")" ]]; then
         _selected_groups+=("${_each_group}")
      else
         echo "error group ${_each_group} is not found ... exiting"
         exit 255
      fi
   done
fi

echo "===== List of groups ====="
echo "${_selected_groups[*]}" | column

_reply_date=$(date -d "+14 days" "+%B %d, %Y")
declare -A _email_content_array # [e.mail@addr.ess][all the email content to be later sent]

declare getent_query=""
declare group=""
declare -a owners
declare -a dms

# literally whole function's content stolen from colleagues
# only argument is group
function _query_ldap(){
   dms=()
   owners=()
   #
   # Get group owners
   if ${_parse_owners}; then
      getent_query=""
      if [[ $(getent group "${group}-owners") ]]; then
         getent_query="$(getent group "${group}-owners" | sed 's/.*://')"
         ( ${_verbose} ) && echo "      DEBUG: QUERY RESULT >${getent_query}<"
         if [[ -n "${getent_query:-}" ]]; then
            readarray -t owners < <( printf '%s\n' "${getent_query}" | tr ',' '\n' | sort )
         fi
      fi
      if [[ "${#owners[@]}" -eq "0" ]]; then echo -n "  ! (no users assigned)"; fi
      echo "    owners = >${owners[*]:-}<"
   fi
   #
   # Get data managers
   if ${_parse_dms}; then
      getent_query=""
      if [[ $(getent group "${group}-dms") ]]; then
         getent_query="$(getent group "${group}-dms" | sed 's/.*://')"
         ( ${_verbose} ) && echo "      DEBUG: QUERY RESULT >${getent_query}<"
         if [[ -n "${getent_query:-}" ]]; then
            readarray -t dms < <( printf '%s\n' "${getent_query}" | tr ',' '\n' | sort )
         fi
      fi
      if [[ "${#dms[@]}" -lt "2" ]]; then echo -n "  ! (less than two users assigned)"; fi
      echo "    dms = >${dms[*]:-}<"
   fi
}

for group in ${_selected_groups[@]}; do
   echo "--- Collecting info for group '${group}' ---"
   groupinformation="$(colleagues -p -e -g "${group}"  | sed 's/<.*>//g')"  # get group info and remove the e-mails from the content
   _query_ldap
   _all_recipients=()
   _all_recipients=("${owners[@]:-}")
   _all_recipients+=("${dms[@]:-}")
   for _each_recipient in "${_all_recipients[@]}"; do
      if [[ -z "${_each_recipient}" ]]; then continue; fi
      if [[ "${_each_recipient}" == 'NA' ]]; then
          _recipient_mail_address="hpc.helpdesk@umcg.nl"
      else
         # extract email address from getent
         _recipient_mail_address="$(getent passwd "${_each_recipient}" |  grep -o -P '<.+>' | tr -d '<' | tr -d '>')"
      fi
      # check if getent returned empty mail address
      if [[ ! -z "${_recipient_mail_address}" ]]; then
         _email_content_array+=(["${_recipient_mail_address}"]="\n\n\n${groupinformation}\n")
      else
          # getent is empty: now we are extracting the emails from all the LDAPs
          ( ${_verbose} ) && echo "      - checking domain ${_ldap_domain}"
          ( ${_verbose} ) && echo "        Warning! There is an empty email address for ${_each_recipient} !"
          ( ${_verbose} ) && echo "        trying to get ${_recipient_mail_address} ... from ldap"
          _ldap_recipient=$(ldapsearch -LLL -o ldif-wrap=no -H "${domain_configs[${_ldap_domain}'_uri']}" -D "${domain_configs[${_ldap_domain}'_bind_dn']}" -w"${domain_configs[${_ldap_domain}'_bind_pw']}" -b "${domain_configs[${_ldap_domain}'_search_base']}" "uid=${_each_recipient}" "mail" | grep "mail:" | cut -f 2 -d' ')
          ( ${_verbose} ) && echo "          ldapsearch -LLL -o ldif-wrap=no -H \"${domain_configs[${_ldap_domain}'_uri']}\" -D \"${domain_configs[${_ldap_domain}'_bind_dn']}\" -w\"${domain_configs[${_ldap_domain}'_bind_pw']}\" -b \"${domain_configs[${_ldap_domain}'_search_base']}\" \"(uid=${_each_recipient})\" \"mail\""
          ( ${_verbose} ) && echo "    _ldap_recipient=${_ldap_recipient}"
          ( ${_verbose} ) && echo "        setting recipient to ${_ldap_recipient} ..."
          _recipient_mail_address="${_ldap_recipient}"
      fi
      # now that there is correct e-mail for each user, create a content with group information
      if [[ ! -z "${_recipient_mail_address}" ]]; then # if mail address is not empty
         _email_content_array+=(["${_recipient_mail_address}"]="\n\n\n${groupinformation}\n")
      fi
   done
done

# Create directory to output results
if ! test -d "${_output_mail_dir}"; then echo "making ${_output_mail_dir} ..."; mkdir "${_output_mail_dir}"; fi

# loop through mail array, create e-mail content and send one e-mail to every group owner/dm
echo "=== E-mail ==="
echo "--- Now making e-mail for each user ---"
if ( ${_redirect} ); then echo " > being redirected to ${_redirect_mail}"; fi
for _each_mail_address in "${!_email_content_array[@]}"; do
    if [[ ! "${_each_mail_address}" =~ ${email_regex} ]]; then
       echo "  Warning! There is something wrong with mail address ${_each_mail_address}"
    fi
#    echo " _each_mail_address = > $_each_mail_address < "
    # different e-mail greeting when sending to hpc.helpdesk (if no owner) vs when sending to users
    if [[ "${_each_mail_address}" == "hpc.helpdesk@umcg.nl" ]]; then
        _greetings="Dear GCC helpdesk,<br />The groups listed below have no group owners. Please contact somebody in the group.<br />Or make somebody (in the group) the owner. <br /><br />Cheers GCC<br /><br />"
    else
        _greetings="Dear Colleague,\n\nYou receive this e-mail because you are registered as a group-owner or datamanager on one of the UMCG HPC clusters, hosted by the Genomics Coordination Center.\nFor information security reasons we regularly need to check if the member list of your group is still up to date, required for ISO27001 and GDPR/AVG standards. This is to ensure no unauthorized people have access to the data in your group.\n\nBelow is the overview of datamanagers and members of your group(s). Please check it and let us know if it is OK or which people should be removed. If you are the datamanager of a group please assist or remind your group owner if needed. We need the answer from the group owner him/herself.\n\nAdditionally, please check if your group has at least 2 people appointed as datamanager (responsible for keeping the data organized and in track). If not, then let us know who should be appointed.\nIdeally we would also like to have 2 people as group owner (usually this is Principal Investigator or head of the research group involved). If you do not have 2 owners for your group but you have a suitable candidate for this, please let us know.\n\nPlease mail us on hpc.helpdesk@umcg.nl before ${_reply_date} and let us know if everything is correct or which changes need to be made.\nIf you are involved in more than one group on the cluster you will find the overview for each of your groups below in this mail. Please check all of your groups.\n\nOne more thing: given the information security policy of the UMCG we now also need to register for each group on our HPC clusters under what number(s) the studies you perform in that group are registered in the UMCG Research Register. Please let us know this as well for your group(s).\nThank you in advance for your cooperation. If you have any questions, we will be happy to help.\n\nKind regards\nGenomics Coordination Center Helpdesk\ndept of Genetics, UMCG"
    fi

    echo -n " ${_each_mail_address}"
    echo -e "${_greetings}${_email_content_array[${_each_mail_address}]}" >> "${_output_mail_dir}/${_each_mail_address}"
done
echo ""
echo "All e-mails and their contents are in the files in the folder ${_output_mail_dir}"
echo ""
{% endraw %}
