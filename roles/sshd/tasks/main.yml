---
- name: Check if system has /etc/pam.d/sshd
  ansible.builtin.stat:
    path: /etc/pam.d/sshd
  register: pam_sshd_status
  when: inventory_hostname in totp.machines | default([])

- name: Fail if host does not have /etc/pam.d/sshd.
  ansible.builtin.fail:
    msg: This host does not have a /etc/pam.d/sshd file. We cannot configure the PAM stack. Check the sshd setup.
  when:
    - (inventory_hostname in totp.machines | default([])) or
      (inventory_hostname in pam_weblogin.machines | default([]))
    - pam_sshd_status.stat.exists is false

- name: Fail if both MFA with TOTPs and pam plugin for web logins are configured.
  ansible.builtin.fail:
    msg: "MFA with TOTPs and the pam plugin for web logins are both configured, but mutually exclusive:
         check the sshd setup for the {{ stack_name }} stack."
  when:
    - inventory_hostname in totp.machines | default([])
    - inventory_hostname in pam_weblogin.machines | default([])

- name: 'Update /etc/pam.d/sshd: Enable password-auth.'
  ansible.builtin.lineinfile:
    path: '/etc/pam.d/sshd'
    owner: root
    group: root
    mode: '0644'
    insertafter: '^#%PAM'
    regexp: '^#?auth(\s+)([a-z]+)(\s+)password-auth'
    line: 'auth       substack     password-auth'
  when:
    - inventory_hostname not in totp.machines | default([])
    - inventory_hostname not in pam_weblogin.machines | default([])
  become: true

- name: Disable TOTPs for MFA.
  ansible.builtin.include_tasks:
    file: disable_totps.yml
  when: inventory_hostname not in totp.machines | default([])

- name: Disable pam plugin for web logins.
  ansible.builtin.include_tasks:
    file: disable_pam_weblogin.yml
  when: inventory_hostname not in pam_weblogin.machines | default([])

- name: Enable TOTPs for MFA.
  ansible.builtin.include_tasks:
    file: enable_totps.yml
  when: inventory_hostname in totp.machines | default([])

- name: Enable pam plugin for web logins.
  ansible.builtin.include_tasks:
    file: enable_pam_weblogin.yml
  when: inventory_hostname in pam_weblogin.machines | default([])

- name: Deploy config files for patched system wide crypto policies.
  ansible.builtin.template:
    src: "{{ item }}.pmod"
    dest: "/etc/crypto-policies/policies/modules/{{ item }}.pmod"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ sshd_crypto_policies[os_distribution] }}"
  notify: update-crypto-policies
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

#
# Find all subpolicy files: The result should contain all the sub policy files we just deployed,
# but may also contain additional sub policy files added by for example a security update.
#
- name: Find all subpolicy files.
  ansible.builtin.find:
    paths:
      - /etc/crypto-policies/policies/modules/
    patterns: '*.pmod'
  register: sshd_found_crypto_subpolicy_files
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Find extra config files we do not want in /etc/ssh/sshd_config.d/.
  ansible.builtin.find:
    paths: '/etc/ssh/sshd_config.d/'
    use_regex: true
    patterns:
      - 50-cloud-init.conf
      - 50-redhat.conf
  register: found_extra_sshd_configs
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

#
# We disable every line in extra sshd config files,
# but do keep these files to prevent a dnf update from recreting them.
#
- name: Disable every line in extra sshd config files we do not want to use.
  ansible.builtin.replace:
    path: "{{ item }}"
    owner: root
    group: root
    mode: '0600'
    regexp: '^([^#][^\n]*)$'
    replace: '#\1'
  loop: "{{ found_extra_sshd_configs['files'] | map(attribute='path') | list }}"
  notify: restart_sshd
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Deploy main sshd config.
  ansible.builtin.template:
    src: templates/sshd_config
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0600'
    validate: '/usr/sbin/sshd -T -C user=root -C host=localhost -C addr=localhost -C lport=22 -f %s'
  notify: restart_sshd
  become: true

- name: Create /etc/ssh/sshd_config.d if it does not exist
  ansible.builtin.file:
    path: /etc/ssh/sshd_config.d
    state: directory
    owner: root
    group: root
    mode: '0655'
  become: true

- name: Deploy extra sshd config to use patched system wide crypto policy.
  ansible.builtin.template:
    src: 50-crypto-policies.conf
    dest: /etc/ssh/sshd_config.d/50-crypto-policies.conf
    owner: root
    group: root
    mode: '0600'
    validate: '/usr/sbin/sshd -T -C user=root -C host=localhost -C addr=localhost -C lport=22 -f %s'
  notify: restart_sshd
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "9"

#
# All Diffie-Hellman moduli used for diffie-hellman-group-exchange-sha256 should be at least sshd_moduli_minimum bit long.
# See also man moduli.
# Moduli are stored in /etc/ssh/moduli
# The 5th column of this file contains the length of the moduli.
#
- name: Check if /etc/ssh/moduli contains weak (small) values.
  ansible.builtin.shell: awk '$5 < {{ sshd_moduli_minimum }}' /etc/ssh/moduli
  register: sshd_register_moduli
  changed_when: false
  check_mode: false
  become: true

- name: Remove weak (small) values from /etc/ssh/moduli.
  ansible.builtin.shell: awk '$5 >= {{ sshd_moduli_minimum }}' /etc/ssh/moduli > /etc/ssh/moduli.new ;
         [ -r /etc/ssh/moduli.new -a -s /etc/ssh/moduli.new ] && mv /etc/ssh/moduli.new /etc/ssh/moduli || true
  when: sshd_register_moduli.stdout | length > 1
  changed_when: sshd_register_moduli.stdout | length > 1
  notify: restart_sshd
  become: true

- name: Check permissions on /etc/ssh/moduli.
  ansible.builtin.file:
    path: /etc/ssh/moduli
    state: file
    owner: root
    group: root
    mode: '0640'
  become: true

- name: Populate service facts.
  ansible.builtin.service_facts:

- name: Disable PC/SC Smart Cards for authentication as we do not use them on servers.
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    daemon_reload: true
  with_items:
    - pcscd.service
    - pcscd.socket
  when:
    - ansible_facts.services is defined
    # The ansible.builtin.service_facts task only registers systemd units with names that ends in .service
    # Therefore we assume pcscd.socket also exists if pcscd.service exists in ansible_facts.services.
    - "'pcscd.service' in ansible_facts.services"
  become: true

- name: Get active system-wide crypto policies.
  ansible.builtin.command:
    cmd: update-crypto-policies --show
  register: sshd_show_crypto_policies
  changed_when: false
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Check if we need to update the system-wide crypto policies.
  ansible.builtin.debug:
    msg: "{{ item }} not in {{ sshd_active_crypto_policies }} -> notifying handler."
  loop: "{{ sshd_found_crypto_subpolicy_files.files
        | map(attribute='path') | map('basename') | map('splitext') | map('first')
        | unique | list }}"
  vars:
    sshd_active_crypto_policies: "{{ sshd_show_crypto_policies.stdout | split(':') }}"
  changed_when: item not in sshd_active_crypto_policies
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"
    - item not in sshd_active_crypto_policies
  notify: update-crypto-policies

#
# Flush handlers, because if the playbook continues without it,
# then it can fail before the end and thus the files (like policy modules) will remain unconfigured.
#
- name: Flush handlers.
  ansible.builtin.meta: flush_handlers

- name: Get active system-wide crypto policies again after applying custom config.
  ansible.builtin.command:
    cmd: update-crypto-policies --show
  register: sshd_show_crypto_policies
  changed_when: false
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Check if the system-wide crypto policies were configured correctly.
  ansible.builtin.debug:
    msg: "ERROR: {{ item }} not in {{ sshd_active_crypto_policies }}."
  loop: "{{ sshd_found_crypto_subpolicy_files.files
        | map(attribute='path') | map('basename') | map('splitext') | map('first')
        | unique | list }}"
  vars:
    sshd_active_crypto_policies: "{{ sshd_show_crypto_policies.stdout | split(':') }}"
  changed_when: false
  failed_when: item.result not in sshd_active_crypto_policies
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"
    - item not in sshd_active_crypto_policies

- name: Check if the configured system-wide crypto policies were applied correctly.
  ansible.builtin.command:
    cmd: 'update-crypto-policies --is-applied'
  register: sshd_applied_crypto_policies
  changed_when: false
  failed_when:
    - "'The configured policy is applied' not in sshd_applied_crypto_policies.stdout"
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Check the configured system-wide crypto policies.
  ansible.builtin.command:
    cmd: 'update-crypto-policies --check'
  register: sshd_check_crypto_policies
  changed_when: false
  failed_when:
    - "'The configured policy matches the generated policy' not in sshd_check_crypto_policies.stdout"
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "9"
...
