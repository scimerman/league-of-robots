---
#
##
### Mount PFS-ses on DAI and create all required LFS-ses and subfolders on them with the correct permissions.
##
#
- name: 'Create credential files for mounting cifs shares.'
  ansible.builtin.template:
    src: 'templates/credentials.cifs'
    dest: "/etc/sysconfig/{{ item.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}.cifs"
    mode: '0600'
    owner: root
    group: root
  with_items: "{{ pfs_mounts | selectattr('device', 'undefined') | selectattr('type', 'equalto', 'cifs') | list }}"
  when: inventory_hostname in item.machines | default([])
  become: true

- name: 'Mount complete Physical File Systems (PFS-ses).'
  ansible.posix.mount:  # noqa jinja[spacing]
    path: "/mnt/{{ item.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}"
    src: "{{ item.source }}/{{ item.pfs }}"
    fstype: "{{ item.type }}"
    opts: "{{ item.rw_options }}{{ extra_opts }}"
    state: 'mounted'
  vars:
    extra_opts: >-
      {%- if item.type == 'cifs' -%}
      ,credentials=/etc/sysconfig/{{ item.pfs | regex_replace('\$$', '') | regex_replace('/', '_') }}.cifs,uid=root,gid=root,dir_mode=02750,file_mode=0640
      {%- endif -%}
  with_items: "{{ pfs_mounts | selectattr('device', 'undefined') | list }}"
  when: inventory_hostname in item.machines | default([])
  become: true

- name: 'Create "home" Logical File System (LFS) on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/{{ item.lfs }}"
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'
  with_items: "{{ lfs_mounts | selectattr('lfs', 'search', 'home') | list }}"
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create root groups folder for "tmp", "rsc", "prm" and "dat" Logical File Systems (LFSs) on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/groups"
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'
  with_items:
    - "{{ lfs_mounts | selectattr('lfs', 'search', '((tmp)|(rsc)|(prm)|(dat))[0-9]+$') | list }}"
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create folder for each group on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.0.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/groups/{{ item.1.name }}"
    owner: 'root'
    group: "{{ item.1.name }}"
    mode: '2750'
    state: 'directory'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', '((tmp)|(rsc)|(prm)|(dat))[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create "tmp" Logical File Systems (LFSs) for each group on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.0.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    owner: "{{ item.1.name }}-dm"
    group: "{{ item.1.name }}"
    mode: "{{ item.1.mode | default('2770', true) }}"
    state: 'directory'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'tmp[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create "rsc" Logical File Systems (LFSs) for each group on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.0.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    owner: "{{ item.1.name }}-dm"
    group: "{{ item.1.name }}"
    mode: "{{ item.1.mode | default('2750', true) }}"
    state: 'directory'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'rsc[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create "prm" Logical File Systems (LFSs) for each group on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.0.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    owner: "{{ item.1.name }}-dm"
    group: "{{ item.1.name }}"
    mode: "{{ item.1.mode | default('2750', true) }}"
    state: 'directory'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'prm[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create "dat" Logical File Systems (LFSs) for each group on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.0.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    owner: "{{ item.1.name }}-dm"
    group: "{{ item.1.name }}"
    mode: "{{ item.1.mode | default('2770', true) }}"
    state: 'directory'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'dat[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='machines') | first | default([])
  become: true

- name: 'Create "apps" Logical File Systems (LFSs) on Physical File Systems (PFSs).'
  ansible.builtin.file:
    path: "/mnt/{{ item.pfs | regex_replace('\\$$', '') | regex_replace('/', '_') }}/{{ item.lfs }}/apps"
    owner: "{{ envsync_user }}"
    group: "{{ envsync_group }}"
    mode: '2755'
    state: 'directory'
  with_items:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list }}"
  when: inventory_hostname in pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='machines') | first | default([])
  become: true

#
##
### Unmount LFS-ses, which are no longer configured to be mounted.
##
#
- name: 'Unmount shared storage LFS-ses no longer configured to be mounted.'
  ansible.posix.mount:  # noqa jinja[spacing]
    path: "{{ item['mount'] }}"
    src: "{{ item['device'] }}"
    state: absent
  vars:
    configured_lfs_mount_devices_string: "
      {%- for lfs_mount in lfs_mounts | selectattr('lfs', 'search', 'home') | list -%}
        {%- if inventory_hostname in lfs_mount['rw_machines'] | default([])
            or inventory_hostname in lfs_mount['ro_machines'] | default([]) -%}
      {{ pfs_mounts
         | selectattr('pfs', 'equalto', lfs_mount['pfs'])
         | map(attribute='source')
         | first }}/{{ lfs_mount['pfs'] }}/{{ lfs_mount['lfs'] }}#
        {%- endif -%}
      {%- endfor -%}
      {%- for lfs_mount in lfs_mounts | selectattr('lfs', 'search', '((tmp)|(rsc)|(prm)|(dat))[0-9]+$') | list -%}
        {%- if inventory_hostname in lfs_mount['rw_machines'] | default([])
            or inventory_hostname in lfs_mount['ro_machines'] | default([]) -%}
          {%- for group in lfs_mount['groups'] -%}
      {{ pfs_mounts
         | selectattr('pfs', 'equalto', lfs_mount['pfs'])
         | map(attribute='source')
         | first }}/{{ lfs_mount['pfs'] }}/groups/{{ group['name'] }}/{{ lfs_mount['lfs'] }}#
          {%- endfor -%}
        {%- endif -%}
      {%- endfor -%}
      {%- for lfs_mount in lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list -%}
        {%- if inventory_hostname in lfs_mount['rw_machines'] | default([]) -%}
      {{ pfs_mounts
         | selectattr('pfs', 'equalto', lfs_mount['pfs'])
         | map(attribute='source')
         | first }}/{{ lfs_mount['pfs'] }}/{{ lfs_mount['lfs'] }}#
        {%- endif -%}
      {%- endfor -%}
      {%- for lfs_mount in lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list -%}
        {%- if inventory_hostname in lfs_mount['ro_machines'] | default([]) -%}
      {{ pfs_mounts
         | selectattr('pfs', 'equalto', lfs_mount['pfs'])
         | map(attribute='source')
         | first }}/{{ lfs_mount['pfs'] }}/{{ lfs_mount['lfs'] }}/apps#
        {%- endif -%}
      {%- endfor -%}"
    configured_lfs_mount_devices: "{{ configured_lfs_mount_devices_string
      | regex_replace('#+$', '')
      | split('#') }}"
  with_items: "{{ ansible_mounts
    | selectattr('mount', 'defined')
    | selectattr('mount', 'search', '^/(groups/)|(apps)|(home)|(mnt/env[0-9]+)')
    | selectattr('device', 'defined')
    | selectattr('device', 'search', ':/')
    | sort(attribute='device')
    | list }}"
  when: item['device'] not in configured_lfs_mount_devices
  become: true

#
##
### Mount all LFS-ses on cluster components/machines.
##
#
- name: 'Mount "home" Logical File System (LFS) from shared storage read-write.'
  ansible.posix.mount:
    path: "/home"
    src: "{{ pfs_mounts | selectattr('pfs', 'match', item.pfs) | map(attribute='source') | first }}/\
          {{ item.pfs }}/{{ item.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'match', item.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'match', item.pfs) | map(attribute='rw_options') | first }}"
    state: 'mounted'
  with_items: "{{ lfs_mounts | selectattr('lfs', 'search', 'home') | list }}"
  when:
    - inventory_hostname in item.rw_machines | default ([])
  become: true

- name: 'Mount "home" Logical File System (LFS) from shared storage read-only.'
  ansible.posix.mount:
    path: "/home"
    src: "{{ pfs_mounts | selectattr('pfs', 'match', item.pfs) | map(attribute='source') | first }}/\
          {{ item.pfs }}/{{ item.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'match', item.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'match', item.pfs) | map(attribute='ro_options') | first }}"
    state: 'mounted'
  with_items: "{{ lfs_mounts | selectattr('lfs', 'search', 'home') | list }}"
  when:
    - inventory_hostname in item.ro_machines | default ([])
  become: true

- name: 'Create root /groups folder.'
  ansible.builtin.file:
    path: '/groups'
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'
  when: inventory_hostname in groups['compute_node'] | default([]) or
        inventory_hostname in groups['user_interface'] | default([]) or
        inventory_hostname in groups['deploy_admin_interface'] | default([]) or
        inventory_hostname in groups['chaperone'] | default([])
  become: true

- name: 'Create folder for each group in /groups.'
  ansible.builtin.file:
    path: "/groups/{{ item }}"
    owner: 'root'
    group: 'root'
    mode: '0755'
    state: 'directory'
  with_items:
    - "{{ lfs_mounts | selectattr('lfs', 'search', '((tmp)|(rsc)|(prm)|(dat))[0-9]+$')
          | map(attribute='groups') | list | flatten
          | map(attribute='name') | list | unique }}"
  when: inventory_hostname in groups['compute_node'] | default([]) or
        inventory_hostname in groups['user_interface'] | default([]) or
        inventory_hostname in groups['deploy_admin_interface'] | default([]) or
        inventory_hostname in groups['chaperone'] | default([])
  become: true

- name: 'Mount "tmp" Logical File Systems (LFSs) per group from shared storage read-write.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='rw_options') | first }}"
    state: 'mounted'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'tmp[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.rw_machines | default ([])
  become: true

- name: 'Mount "tmp" Logical File Systems (LFSs) per group from shared storage read-only.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='ro_options') | first }}"
    state: 'mounted'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'tmp[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.ro_machines | default ([])
  become: true

- name: 'Mount "rsc" Logical File Systems (LFSs) per group from shared storage read-write.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='rw_options') | first }}"
    state: 'mounted'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'rsc[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.rw_machines | default ([])
  become: true

- name: 'Mount "rsc" Logical File Systems (LFSs) per group from shared storage read-only.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='ro_options') | first }}"
    state: 'mounted'
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'rsc[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.ro_machines | default ([])
  become: true

- name: 'Mount "prm" Logical File Systems (LFSs) per group from shared storage read-write.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='rw_options') | first }}{{ extra_opts }}"
    state: 'mounted'
  vars:
    extra_opts: >-
      {%- if pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first == 'cifs' -%}
      ,credentials=/etc/sysconfig/{{ item.0.pfs | regex_replace('\$$', '') }}.cifs,uid={{ item.1.name }}-dm,gid={{ item.1.name }},dir_mode=02750,file_mode=0640
      {%- endif -%}
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'prm[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.rw_machines | default ([])
  become: true

- name: 'Mount "prm" Logical File Systems (LFSs) per group from shared storage read-only.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='ro_options') | first }}{{ extra_opts }}"
    state: 'mounted'
  vars:
    extra_opts: >-
      {%- if pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first == 'cifs' -%}
      ,credentials=/etc/sysconfig/{{ item.0.pfs | regex_replace('\$$', '') }}.cifs,uid={{ item.1.name }}-dm,gid={{ item.1.name }},dir_mode=02750,file_mode=0640
      {%- endif -%}
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'prm[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.ro_machines | default ([])
  become: true

- name: 'Mount "dat" Logical File Systems (LFSs) per group from shared storage read-write.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='rw_options') | first }}{{ extra_opts }}"
    state: 'mounted'
  vars:
    extra_opts: >-
      {%- if pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first == 'cifs' -%}
      ,credentials=/etc/sysconfig/{{ item.0.pfs | regex_replace('\$$', '') }}.cifs,uid={{ item.1.name }}-dm,gid={{ item.1.name }},dir_mode=02770,file_mode=0660
      {%- endif -%}
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'dat[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.rw_machines | default ([])
  become: true

- name: 'Mount "dat" Logical File Systems (LFSs) per group from shared storage read-only.'
  ansible.posix.mount:
    path: "/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='source') | first }}/\
          {{ item.0.pfs }}/groups/{{ item.1.name }}/{{ item.0.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='ro_options') | first }}{{ extra_opts }}"
    state: 'mounted'
  vars:
    extra_opts: >-
      {%- if pfs_mounts | selectattr('pfs', 'equalto', item.0.pfs) | map(attribute='type') | first == 'cifs' -%}
      ,credentials=/etc/sysconfig/{{ item.0.pfs | regex_replace('\$$', '') }}.cifs,uid={{ item.1.name }}-dm,gid={{ item.1.name }},dir_mode=02770,file_mode=0660
      {%- endif -%}
  with_subelements:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'dat[0-9]+$') | list }}"
    - 'groups'
  when: inventory_hostname in item.0.ro_machines | default ([])
  become: true

- name: 'Mount "env" Logical File Systems (LFSs) from shared storage read-write.'
  ansible.posix.mount:
    path: "/mnt/{{ item.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='source') | first }}/\
          {{ item.pfs }}/{{ item.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='rw_options') | first }}"
    state: 'mounted'
  with_items: "{{ lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list }}"
  when:
    - inventory_hostname in item.rw_machines | default ([])
    - inventory_hostname in groups['deploy_admin_interface'] | default([])
  become: true

- name: 'Mount "env" Logical File Systems (LFSs) from shared storage read-only.'
  ansible.posix.mount:
    path: "/mnt/{{ item.lfs }}"
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='source') | first }}/\
          {{ item.pfs }}/{{ item.lfs }}"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='ro_options') | first }}"
    state: 'mounted'
  with_items: "{{ lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list }}"
  when:
    - inventory_hostname in item.ro_machines | default ([])
    - inventory_hostname in groups['deploy_admin_interface'] | default([])
  become: true

- name: 'Mount "apps" from one "env" Logical File System (LFS) from shared storage read-write as /apps.'
  ansible.posix.mount:
    path: '/apps'
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='source') | first }}/\
          {{ item.pfs }}/{{ item.lfs }}/apps"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='rw_options') | first }}"
    state: 'mounted'
  with_items:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list }}"
  when:
    - inventory_hostname in item.rw_machines | default ([])
    - inventory_hostname in groups['compute_node'] | default([]) or
      inventory_hostname in groups['user_interface'] | default([])
  become: true

- name: 'Mount "apps" from one "env" Logical File System (LFS) from shared storage read-only as /apps.'
  ansible.posix.mount:
    path: '/apps'
    src: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='source') | first }}/\
          {{ item.pfs }}/{{ item.lfs }}/apps"
    fstype: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='type') | first }}"
    opts: "{{ pfs_mounts | selectattr('pfs', 'equalto', item.pfs) | map(attribute='ro_options') | first }}"
    state: 'mounted'
  with_items:
    - "{{ lfs_mounts | selectattr('lfs', 'search', 'env[0-9]+$') | list }}"
  when:
    - inventory_hostname in item.ro_machines | default ([])
    - inventory_hostname in groups['compute_node'] | default([]) or
      inventory_hostname in groups['user_interface'] | default([])
  become: true

#
##
### Deploy quota management
##
#
- name: Deploy config file with quota_pid_increments for project quota.
  ansible.builtin.template:
    src: 'templates/quota.conf'
    dest: '/etc/quota.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when: inventory_hostname in lfs_mounts
            | rejectattr('quota_type', 'undefined')
            | rejectattr('rw_machines', 'undefined')
            | selectattr('quota_type', 'equalto', 'project')
            | map(attribute='rw_machines')
            | flatten | unique or
        inventory_hostname in lfs_mounts
            | rejectattr('quota_type', 'undefined')
            | rejectattr('ro_machines', 'undefined')
            | selectattr('quota_type', 'equalto', 'project')
            | map(attribute='ro_machines')
            | flatten | unique or
        (lfs_mounts
            | rejectattr('quota_type', 'undefined')
            | selectattr('quota_type', 'equalto', 'project')
            | length >= 1
           and
           inventory_hostname in pfs_mounts
              | rejectattr('machines', 'undefined')
              | map(attribute='machines')
              | flatten | unique)
  become: true

- name: 'Deploy script to fetch quota limits from an LDAP and set them on shared storage mounts.'
  ansible.builtin.template:
    src: 'templates/ldapquota.bash'
    dest: '/root/ldapquota.bash'
    owner: 'root'
    group: 'root'
    mode: '0700'
  when: inventory_hostname in groups['sys_admin_interface'] | default([])
  become: true

- name: 'Create cron job for ldapquota.bash script.'
  ansible.builtin.cron:
    name: 'Apply quota limits from LDAP to shared storage mounts.'
    minute: '15'
    hour: '9,11,13,15,17,19,21'
    user: 'root'
    job: '/root/ldapquota.bash -a'
    cron_file: 'ldapquota'
  when: inventory_hostname in groups['sys_admin_interface'] | default([])
  become: true
...
