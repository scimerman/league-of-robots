---
- name: Set selinux in permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  become: true

- name: Install some standard software
  ansible.builtin.package:
    state: latest
    update_cache: true
    name: "{{ cluster_common_packages[distro] }}"
  vars:
    distro: "{{ ansible_facts['os_family'] + ansible_facts['distribution_major_version'] }}"
  tags:
    - software
  become: true

- name: Add custom config files to /etc/skel/.
  ansible.posix.synchronize:
    src: "{{ playbook_dir }}/roles/cluster/files/skel/./{{ item.src }}"
    dest: '/etc/skel/'
    owner: 'no'
    group: 'no'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    rsync_opts:
      # --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      # --omit-link-times Is required to prevent "sync error: some files/attrs were not transferred"
      #                   for file systems like NFS mounts that cannot handle setting dir times properly.
      #                   Requires rsync >= 3.1.2 (default on Enterprise Linux >= 7.x).
      # --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
      #                   Fixing perms on the source would be good, but that may be out of our control.
      #                   In that case --chmod ensures we get what we want on the destination.
      #                   Works only when combined with --perms.
      # --force           Is required when symlinks have changed into dirs/files or vice versa.
      #                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
      #                   Deleting the outdated stuff may fail without --force.
      # --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
      #                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
      #                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
      #                   IMPORTANT: src and dest paths must be absolute paths. Otherwise Ansible will expand the path itself which will remove the /./ dir.
      - '--relative'
      - '--omit-dir-times'
      - '--omit-link-times'
      - "--chmod={{ item.mode }}"
      - '--perms'
      - '--force'
  with_items:
    - src: '.bashrc'
      mode: 'Du=rwx,Dgo=rx,Fu=rw,Fgo=r'
    - src: '.screenrc'
      mode: 'Du=rwx,Dgo=rx,Fu=rw,Fgo=r'
    - src: '.ssh'
      mode: 'Du=rwx,Dgo-rwx,Fu=rw,Fgo-rwx'
  become: true
...
