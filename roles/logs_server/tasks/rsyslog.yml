---
- name: Get information on CA key from the repo
  ansible.builtin.stat:
    path: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_key_file }}"
  register: repo_rsyslog_ca_key
  delegate_to: localhost
  connection: local

- name: Get information on CA certificate from the repo
  ansible.builtin.stat:
    path: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_cert_file }}"
  register: repo_rsyslog_ca_cert
  delegate_to: localhost
  connection: local

- name: Get information on CA key from managed rsyslog server
  ansible.builtin.stat:
    path: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
  register: rsyslog_ca_key_on_server
  become: true

- name: Get information on CA cert from managed rsyslog server
  ansible.builtin.stat:
    path: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_key_file }}"
  register: rsyslog_ca_cert_on_server

- name: Install gnutls and newer openssl
  ansible.builtin.package:
    name:
      - gnutls
      - gnutls-utils
      - python-firewall
      - firewalld
      - openssl11
      - openssl11-devel
    state: latest
    update_cache: true
  become: true
  notify: restart-rsyslog.service
  when: ansible_facts['distribution_major_version'] <= "7"

- name: Install gnutls and newer openssl
  ansible.builtin.package:
    name:
      - gnutls
      - gnutls-utils
      - openssl
      - openssl-devel
    state: latest
    update_cache: true
  become: true
  notify: restart-rsyslog.service
  when: ansible_facts['distribution_major_version'] >= "9"

- name: Install rsyslog and gnutls with all plugins
  ansible.builtin.package:
    name:
      - rsyslog
      - librelp
      - rsyslog-relp
      - rsyslog-gnutls
    state: latest
    update_cache: true
    disablerepo: '*'
    enablerepo: "rsyslog{% if os_distribution == 'centos7' %}7{% endif %}"
  become: true
  notify: restart-rsyslog.service

- name: If rsyslog keys and certificate in repository and on server are missing, then create CA
  ansible.builtin.include_tasks: create_ca.yml
  run_once: true
  when:
    ( not repo_rsyslog_ca_key.stat.exists and not rsyslog_ca_key_on_server.stat.exists ) or
    ( not repo_rsyslog_ca_cert.stat.exists and not rsyslog_ca_cert_on_server.stat.exists)
  register: created_ca

- name: If CA key exists in repository, then deploy it
  ansible.builtin.copy:
    src: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_key_file }}"
    dest: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
    mode: '0600'
    decrypt: true
    force: true
  become: true
  when: repo_rsyslog_ca_key.stat.exists
  notify: restart-rsyslog.service

- name: If CA certificate exists in repository, then deploy it
  ansible.builtin.copy:
    src: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_cert_file }}"
    dest: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_cert_file }}"
    mode: '0644'
    decrypt: false
    force: true
  become: true
  when: repo_rsyslog_ca_cert.stat.exists
  notify: restart-rsyslog.service

- name: Fetch remote CA key to repository
  ansible.builtin.fetch:
    src: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
    dest: "{{ rsyslog_repository_dir }}/"
    flat: true
    fail_on_missing: true
    validate_checksum: true
  when: not repo_rsyslog_ca_key.stat.exists or created_ca.changed # noqa no-handler
  become: true

- name: Fetch servers CA cert to repository
  ansible.builtin.fetch:
    src: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_cert_file }}"
    dest: "{{ rsyslog_repository_dir }}/"
    flat: true
    fail_on_missing: true
    validate_checksum: true
  when: not repo_rsyslog_ca_cert.stat.exists or created_ca.changed # noqa no-handler
  become: true

- name: Create servers key and certificate
  ansible.builtin.include_tasks: server_certificate.yml
  register: created_certificate

- name: Deploy the systemd custom rsyslog.service
  ansible.builtin.copy:
    src: files/rsyslog.service
    dest: /usr/lib/systemd/system/rsyslog.service
    force: true
    mode: '0644'
  become: true
  notify: systemd_reload

- name: Remove problematic /etc/rsyslog.d/listen.conf file
  ansible.builtin.file:
    path: /etc/rsyslog.d/listen.conf
    state: absent
  become: true
  notify: restart-rsyslog.service

- name: Deploy custom rsyslog.service
  ansible.builtin.copy:
    src: files/rsyslog.service
    dest: /usr/lib/systemd/system/rsyslog.service
    force: true
    mode: '0644'
  notify:
    - systemd_reload
    - rsyslog_enable
  become: true

- name: Add logrotate to compress and move old logs to subfolder called 'compressed_logs'
  ansible.builtin.template:
    src: templates/remote.logrotate
    dest: /etc/logrotate.d/remote
    mode: '0644'
    force: true
  become: true

- name: Remove old restart services
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    enabled: false
  with_items:
    - rsyslog-restart.timer
    - rsyslog-restart.service
  become: true

- name: Deploy server rsyslog.conf
  ansible.builtin.template:
    src: templates/rsyslog.conf
    dest: /etc/rsyslog.conf
    force: true
    mode: '0644'
    validate: /sbin/rsyslogd -N1 -f %s
  become: true
  notify: restart-rsyslog.service

- name: Force all services to restart, before next tasks
  ansible.builtin.meta: flush_handlers
...
